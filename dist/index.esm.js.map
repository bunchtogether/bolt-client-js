{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.esm.js","sourcesContent":["// @flow\n\nimport Url from 'url-parse';\nimport superagent from 'superagent';\nimport { debounce, shuffle } from 'lodash';\nimport AsyncStorage from '@callstack/async-storage';\n\nconst log = (color:string, name:string, value:string | number, ...args:Array<any>) => {\n  const label = `%c${name}: %c${value}`;\n  if (args.length === 0) {\n    console.log(label, 'color:#333; font-weight: bold', `color:${color}`); // eslint-disable-line no-console\n    return;\n  }\n  console.group(label, 'color:#333; font-weight: bold', `color:${color}`); // eslint-disable-line no-console\n  for (const arg of args) {\n    if (typeof arg === 'undefined') {\n      continue;\n    } else if (typeof arg === 'string') {\n      console.log(`%c${arg}`, 'color:#666'); // eslint-disable-line no-console\n    } else {\n      if (arg && arg.err) {\n        console.error(arg.err); // eslint-disable-line no-console\n      } else if (arg && arg.error) {\n        console.error(arg.error); // eslint-disable-line no-console\n      }\n      console.dir(arg); // eslint-disable-line no-console\n    }\n  }\n  console.groupEnd(); // eslint-disable-line no-console\n};\n\nconst baseLogger = {\n  debug: (value:string | number, ...args:Array<any>) => {\n    log('blue', 'Bolt Client', value, ...args);\n  },\n  info: (value:string | number, ...args:Array<any>) => {\n    log('green', 'Bolt Client', value, ...args);\n  },\n  warn: (value:string | number, ...args:Array<any>) => {\n    log('orange', 'Bolt Client', value, ...args);\n  },\n  error: (value:string | number, ...args:Array<any>) => {\n    log('red', 'Bolt Client', value, ...args);\n  },\n  errorStack: (error:Error | MediaError) => {\n    console.error(error); // eslint-disable-line no-console\n  },\n};\n\nconst any = (promises:Array<Promise<any>>) => new Promise(((resolve, reject) => {\n  let didResolve = false;\n  for (const promise of promises) {\n    promise.then(() => { // eslint-disable-line no-loop-func\n      if (didResolve) {\n        return;\n      }\n      didResolve = true;\n      resolve();\n    }).catch((error) => { // eslint-disable-line no-loop-func\n      if (didResolve) {\n        return;\n      }\n      didResolve = true;\n      reject(error);\n    });\n  }\n}));\n\nclass BoltUrlError extends Error {}\nclass BoltVerificationError extends Error {}\n\nconst normalizeUrl = (s:string) => {\n  const { protocol, slashes, username, password, hostname, port } = new Url(s);\n  const result = [protocol || 'https:'];\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') {\n    result.push(':');\n  }\n  if (slashes) {\n    result.push('//');\n  }\n  if (username) {\n    result.push(username);\n    if (password) {\n      result.push(`:${password}`);\n    }\n    result.push('@');\n  }\n  result.push(hostname);\n  result.push(port || (protocol === 'https:' ? ':443' : ':80'));\n  return result.join('');\n};\n\nconst chooseServer = (serverMap:Map<string, number>) => {\n  const servers = [...serverMap];\n  const maxPriority = Math.max(...servers.map((x) => x[1]));\n  const maxPriorityServers = servers.filter((x) => x[1] === maxPriority).map((x) => x[0]);\n  return maxPriorityServers[Math.floor(Math.random() * maxPriorityServers.length)];\n};\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void\n};\n\n/**\n * Class representing a Bolt Client\n */\nexport class BoltClient {\n  declare swarmKey: string;\n  declare ready: Promise<void>;\n  declare readyCallback: void | () => void;\n  declare seedServers: Set<string>;\n  declare storedServers: Set<string>;\n  declare preVerifiedServers: Map<string, number>;\n  declare verifiedServers: Map<string, number>;\n  declare throttledSaveVerifiedServers: () => void;\n  declare isResetting: boolean;\n  declare resetCount: number;\n  declare isReady: boolean;\n  declare logger: Logger;\n  declare swarmKey: string | void;\n  declare skipPriorityOneServers: boolean;\n\n  constructor() {\n    this.seedServers = new Set();\n    this.storedServers = new Set();\n    this.preVerifiedServers = new Map();\n    this.verifiedServers = new Map();\n    this.isReady = false;\n    this.ready = new Promise((resolve) => {\n      this.readyCallback = () => resolve();\n    });\n    this.throttledSaveVerifiedServers = debounce(this.saveVerifiedServers.bind(this), 1000);\n    this.loadStoredServers();\n    this.isResetting = false;\n    this.resetCount = 0;\n    this.logger = baseLogger;\n    this.skipPriorityOneServers = false;\n  }\n\n  getUrl(path:string) {\n    if (this.verifiedServers.size > 0) {\n      if (!this.skipPriorityOneServers || Math.max(...[...this.verifiedServers].map((x) => x[1])) > 1) {\n        return new URL(path, chooseServer(this.verifiedServers)).toString();\n      }\n    }\n    if (!this.skipPriorityOneServers) {\n      if (this.seedServers.size > 0) {\n        const urls = Array.from(this.seedServers);\n        const url = urls[Math.floor(Math.random() * urls.length)];\n        return new URL(path, url).toString();\n      }\n    }\n    throw new BoltUrlError('No server URLs available');\n  }\n\n  async reset() {\n    if (this.isResetting === true) {\n      return;\n    }\n    this.resetCount += 1;\n    if (this.resetCount < 6) {\n      this.logger.warn(`Reset attempt ${this.resetCount}, waiting ${this.resetCount * this.resetCount} seconds`);\n      // $FlowFixMe\n      await any([\n        new Promise((resolve) => setTimeout(resolve, this.resetCount * this.resetCount * 1000)),\n        this.ready,\n      ]);\n    } else {\n      this.logger.warn(`Reset attempt ${this.resetCount}, waiting 30 seconds`);\n      // $FlowFixMe\n      await any([\n        new Promise((resolve) => setTimeout(resolve, 30000)),\n        this.ready,\n      ]);\n    }\n    if (this.isReady) {\n      this.logger.warn('Bolt reset cancelled');\n      this.isResetting = false;\n      return;\n    }\n    try {\n      this.isResetting = true;\n      await AsyncStorage.removeItem('BOLT_SERVER_PRIORITY');\n      this.preVerifiedServers = new Map();\n      this.verifiedServers = new Map();\n      this.isReady = false;\n      this.ready = new Promise((resolve) => {\n        this.readyCallback = () => resolve();\n      });\n      for (const url of this.seedServers) {\n        try {\n          await this.verifyServer(url, 0);\n        } catch (error) {\n          this.logger.error(`Unable to verify seed server ${url}`);\n          this.logger.errorStack(error);\n        }\n      }\n    } catch (error) {\n      this.logger.error('Error during Bolt client reset');\n      this.logger.errorStack(error);\n    }\n    this.isResetting = false;\n    if (!this.isReady) {\n      this.reset();\n    }\n  }\n\n  async loadStoredServers() {\n    try {\n      const storedServersString = await AsyncStorage.getItem('BOLT_SERVER_PRIORITY');\n      if (storedServersString) {\n        const storedServers = shuffle(JSON.parse(storedServersString));\n        storedServers.sort((x, y) => y[1] - x[1]);\n        if (storedServers.length > 0) {\n          this.logger.info('Stored Bolt server addresses:');\n        }\n        for (const [url, priority] of storedServers) {\n          this.storedServers.add(url);\n          this.logger.info(`\\t${url} (priority ${priority})`);\n        }\n        for (const [url, priority] of storedServers) {\n          try {\n            await this.verifyServer(url, priority);\n          } catch (error) {\n            this.logger.error(`Unable to verify ${url} (priority ${priority})`);\n            this.logger.errorStack(error);\n          }\n        }\n        if (this.preVerifiedServers.size === 0 && !this.isReady) {\n          this.reset();\n        }\n      }\n    } catch (error) {\n      this.logger.error('Unable to parse stored Bolt server addresses');\n      this.logger.errorStack(error);\n      await AsyncStorage.removeItem('BOLT_SERVER_PRIORITY');\n    }\n  }\n\n  async saveVerifiedServers() {\n    try {\n      await AsyncStorage.setItem('BOLT_SERVER_PRIORITY', JSON.stringify([...this.verifiedServers].map((x) => [x[0], x[1] === 0 ? 0 : 1])));\n    } catch (error) {\n      this.logger.error('Unable to save Bolt servers to local storage');\n      this.logger.errorStack(error);\n    }\n  }\n\n  addServer(s:string) {\n    const url = normalizeUrl(s);\n    if (this.seedServers.has(url)) {\n      return;\n    }\n    if (this.storedServers.has(url)) {\n      return;\n    }\n    this.seedServers.add(url);\n    this.verifyServer(url, 0).catch((error) => {\n      this.logger.error(`Unable to verify seed server ${url}`);\n      this.logger.errorStack(error);\n      if (this.preVerifiedServers.size === 0 && !this.isReady) {\n        this.reset();\n      }\n    });\n  }\n\n  async verifyServer(url:string, priority:number) {\n    const maxExistingPriority = Math.max(...this.verifiedServers.values());\n    if (maxExistingPriority > priority) {\n      this.logger.info(`Not verifying ${url}, verified server with priority ${maxExistingPriority} already exists`);\n      return;\n    }\n    const verifiedServerPriority = this.verifiedServers.get(url);\n    if (typeof verifiedServerPriority === 'number') {\n      if (verifiedServerPriority < priority) {\n        this.verifiedServers.set(url, priority);\n        this.throttledSaveVerifiedServers();\n      }\n      return;\n    }\n    const preVerifiedServerPriority = this.preVerifiedServers.get(url);\n    if (typeof preVerifiedServerPriority === 'number') {\n      if (preVerifiedServerPriority < priority) {\n        this.preVerifiedServers.set(url, priority);\n      }\n      return;\n    }\n    this.logger.info(`Verifying ${url}`);\n    this.preVerifiedServers.set(url, priority);\n    let swarmKey;\n    let hostnames;\n    let ipRangeRoutes;\n    try {\n      const result = await superagent.get(`${url}/api/1.0/network-map/hostnames`);\n      swarmKey = result.body.swarmKey;\n      hostnames = result.body.hostnames;\n      ipRangeRoutes = !!result.body.ipRangeRoutes;\n    } catch (error) {\n      this.verifiedServers.delete(url);\n      this.preVerifiedServers.delete(url);\n      throw new BoltVerificationError(`Unable to fetch hostnames from ${url}`);\n    }\n    if (typeof swarmKey !== 'string') {\n      this.verifiedServers.delete(url);\n      this.preVerifiedServers.delete(url);\n      this.reset();\n      throw new BoltVerificationError(`Hostnames request to ${url} did not return swarm key`);\n    }\n    if (!Array.isArray(hostnames)) {\n      this.verifiedServers.delete(url);\n      this.preVerifiedServers.delete(url);\n      this.reset();\n      throw new BoltVerificationError(`Hostnames request to ${url} did not return hostnames array`);\n    }\n    if (typeof this.swarmKey === 'string') {\n      if (this.swarmKey !== swarmKey) {\n        this.verifiedServers.delete(url);\n        this.preVerifiedServers.delete(url);\n        this.reset();\n        throw new Error(`Swarm key does not match for ${url}`);\n      }\n    } else {\n      this.swarmKey = swarmKey;\n    }\n    const storedPriority = this.preVerifiedServers.get(url) || priority;\n    this.verifiedServers.set(url, storedPriority);\n    this.preVerifiedServers.delete(url);\n    if (ipRangeRoutes || hostnames && hostnames.length > 0) {\n      this.skipPriorityOneServers = true;\n    }\n    for (const hostname of hostnames) {\n      try {\n        await this.verifyServer(normalizeUrl(`https://${hostname}`), 2);\n      } catch (error) {\n        this.logger.error(`Unable to verify https://${hostname}`);\n        this.logger.errorStack(error);\n      }\n    }\n    if (typeof this.readyCallback === 'function' && this.verifiedServers.size > 0 && (!this.skipPriorityOneServers || Math.max(...[...this.verifiedServers].map((x) => x[1])) > 1)) {\n      this.resetCount = 0;\n      this.isReady = true;\n      this.readyCallback();\n      delete this.readyCallback;\n    }\n    this.throttledSaveVerifiedServers();\n  }\n\n  startIpfs() {\n    // Noop\n  }\n}\n\nconst bc = new BoltClient();\n\nif (window) {\n  window.boltClient = bc;\n}\n\nexport default bc;\n"]}