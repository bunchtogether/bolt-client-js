{"version":3,"sources":["../../src/index.js"],"names":["hasWindow","window","log","color","name","value","args","label","length","console","group","arg","err","error","dir","groupEnd","baseLogger","debug","info","warn","errorStack","any","promises","Promise","resolve","reject","didResolve","promise","then","catch","BoltUrlError","Error","BoltVerificationError","normalizeUrl","s","protocol","slashes","username","password","hostname","port","Url","result","charAt","push","join","chooseServer","serverMap","servers","maxPriority","Math","max","map","x","maxPriorityServers","filter","floor","random","BoltClient","EventEmitter","constructor","pauseVerification","seedServers","Set","storedServers","preVerifiedServers","Map","verifiedServers","isReady","ready","readyCallback","throttledSaveVerifiedServers","saveVerifiedServers","bind","isResetting","resetCount","logger","skipPriorityOneServers","getStoredServersCallbacks","saveStoredServersCallbacks","clearStoredServersCallbacks","getUrl","path","size","URL","toString","urls","Array","from","url","reset","setTimeout","clearStoredServersCallback","clusterIdentifier","verifyServer","addStoredServersCallbacks","getStoredServersCallback","saveStoredServersCallback","loadStoredServers","allStoredServers","storedServer","sort","y","priority","add","addedNewServers","isNewServer","addServer","has","verifyServers","all","reverifyServers","clear","setVerifiedServer","emit","set","delete","setPreVerifiedServer","clearServer","checkIsReady","maxExistingPriority","values","verifiedServerPriority","get","preVerifiedServerPriority","hostnames","ipRangeRoutes","response","fetch","body","json","publicKey","swarmKey","isArray","storedPriority","startIpfs","bc","boltClient"],"mappings":"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","sourcesContent":["// @flow\n\nimport Url from 'url-parse';\nimport EventEmitter from 'events';\nimport { debounce, shuffle } from 'lodash';\n\nconst hasWindow = typeof window !== 'undefined';\n\ntype GetStoredServersCallback = () => Promise<Array<[string, number]>> | Array<[string, number]>;\ntype SaveStoredServersCallback = (Array<[string, number]>) => Promise<void> | void;\ntype ClearStoredServersCallback = () => Promise<void> | void;\n\nconst log = (color:string, name:string, value:string | number, ...args:Array<any>) => {\n  const label = `%c${name}: %c${value}`;\n  if (args.length === 0) {\n    console.log(label, 'color:#333; font-weight: bold', `color:${color}`); // eslint-disable-line no-console\n    return;\n  }\n  console.group(label, 'color:#333; font-weight: bold', `color:${color}`); // eslint-disable-line no-console\n  for (const arg of args) {\n    if (typeof arg === 'undefined') {\n      continue;\n    } else if (typeof arg === 'string') {\n      console.log(`%c${arg}`, 'color:#666'); // eslint-disable-line no-console\n    } else {\n      if (arg && arg.err) {\n        console.error(arg.err); // eslint-disable-line no-console\n      } else if (arg && arg.error) {\n        console.error(arg.error); // eslint-disable-line no-console\n      }\n      console.dir(arg); // eslint-disable-line no-console\n    }\n  }\n  console.groupEnd(); // eslint-disable-line no-console\n};\n\nconst baseLogger = {\n  debug: (value:string | number, ...args:Array<any>) => {\n    log('blue', hasWindow ? 'Bolt Client (Window)' : 'Bolt Client (Out of window)', value, ...args);\n  },\n  info: (value:string | number, ...args:Array<any>) => {\n    log('green', hasWindow ? 'Bolt Client (Window)' : 'Bolt Client (Out of window)', value, ...args);\n  },\n  warn: (value:string | number, ...args:Array<any>) => {\n    log('orange', hasWindow ? 'Bolt Client (Window)' : 'Bolt Client (Out of window)', value, ...args);\n  },\n  error: (value:string | number, ...args:Array<any>) => {\n    log('red', hasWindow ? 'Bolt Client (Window)' : 'Bolt Client (Out of window)', value, ...args);\n  },\n  errorStack: (error:Error | MediaError) => {\n    console.error(error); // eslint-disable-line no-console\n  },\n};\n\nconst any = (promises:Array<Promise<any>>) => new Promise(((resolve, reject) => {\n  let didResolve = false;\n  for (const promise of promises) {\n    promise.then(() => { // eslint-disable-line no-loop-func\n      if (didResolve) {\n        return;\n      }\n      didResolve = true;\n      resolve();\n    }).catch((error) => { // eslint-disable-line no-loop-func\n      if (didResolve) {\n        return;\n      }\n      didResolve = true;\n      reject(error);\n    });\n  }\n}));\n\nclass BoltUrlError extends Error {}\nclass BoltVerificationError extends Error {}\n\nconst normalizeUrl = (s:string) => {\n  const { protocol, slashes, username, password, hostname, port } = new Url(s);\n  const result = [protocol || 'https:'];\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') {\n    result.push(':');\n  }\n  if (slashes) {\n    result.push('//');\n  }\n  if (username) {\n    result.push(username);\n    if (password) {\n      result.push(`:${password}`);\n    }\n    result.push('@');\n  }\n  result.push(hostname);\n  result.push(port || (protocol === 'https:' ? ':443' : ':80'));\n  return result.join('');\n};\n\nconst chooseServer = (serverMap:Map<string, number>) => {\n  const servers = [...serverMap];\n  const maxPriority = Math.max(...servers.map((x) => x[1]));\n  const maxPriorityServers = servers.filter((x) => x[1] === maxPriority).map((x) => x[0]);\n  return maxPriorityServers[Math.floor(Math.random() * maxPriorityServers.length)];\n};\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void\n};\n\n/**\n * Class representing a Bolt Client\n */\nexport class BoltClient extends EventEmitter {\n  declare ready: Promise<void>;\n  declare readyCallback: void | () => void;\n  declare seedServers: Set<string>;\n  declare storedServers: Set<string>;\n  declare preVerifiedServers: Map<string, number>;\n  declare verifiedServers: Map<string, number>;\n  declare throttledSaveVerifiedServers: () => void;\n  declare isResetting: boolean;\n  declare resetCount: number;\n  declare isReady: boolean;\n  declare logger: Logger;\n  declare clusterIdentifier: string | void;\n  declare skipPriorityOneServers: boolean;\n  declare getStoredServersCallbacks: Array<GetStoredServersCallback>;\n  declare saveStoredServersCallbacks: Array<SaveStoredServersCallback>;\n  declare clearStoredServersCallbacks: Array<ClearStoredServersCallback>;\n  declare pauseVerification: boolean;\n\n  constructor() {\n    super();\n    this.pauseVerification = false;\n    this.seedServers = new Set();\n    this.storedServers = new Set();\n    this.preVerifiedServers = new Map();\n    this.verifiedServers = new Map();\n    this.isReady = false;\n    this.ready = new Promise((resolve) => {\n      this.readyCallback = () => resolve();\n    });\n    this.throttledSaveVerifiedServers = debounce(this.saveVerifiedServers.bind(this), 1000);\n    this.isResetting = false;\n    this.resetCount = 0;\n    this.logger = baseLogger;\n    this.skipPriorityOneServers = false;\n    this.getStoredServersCallbacks = [];\n    this.saveStoredServersCallbacks = [];\n    this.clearStoredServersCallbacks = [];\n    this.ready.then(() => {\n      if (this.getStoredServersCallbacks.length === 0) {\n        this.logger.error('Missing stored server callbacks');\n      }\n    });\n  }\n\n  getUrl(path:string) {\n    if (this.verifiedServers.size > 0) {\n      if (!this.skipPriorityOneServers || Math.max(...[...this.verifiedServers].map((x) => x[1])) > 1) {\n        return new URL(path, chooseServer(this.verifiedServers)).toString();\n      }\n    }\n    if (!this.skipPriorityOneServers) {\n      if (this.seedServers.size > 0) {\n        const urls = Array.from(this.seedServers);\n        const url = urls[Math.floor(Math.random() * urls.length)];\n        return new URL(path, url).toString();\n      }\n    }\n    throw new BoltUrlError('No server URLs available');\n  }\n\n  async reset() {\n    if (this.isResetting === true) {\n      return;\n    }\n    this.resetCount += 1;\n    if (this.resetCount < 6) {\n      this.logger.warn(`Reset attempt ${this.resetCount}, waiting ${this.resetCount * this.resetCount} seconds`);\n      // $FlowFixMe\n      await any([\n        new Promise((resolve) => setTimeout(resolve, this.resetCount * this.resetCount * 1000)),\n        this.ready,\n      ]);\n    } else {\n      this.logger.warn(`Reset attempt ${this.resetCount}, waiting 30 seconds`);\n      // $FlowFixMe\n      await any([\n        new Promise((resolve) => setTimeout(resolve, 30000)),\n        this.ready,\n      ]);\n    }\n    try {\n      this.isResetting = true;\n      for (const clearStoredServersCallback of this.clearStoredServersCallbacks) {\n        await clearStoredServersCallback();\n      }\n      delete this.clusterIdentifier;\n      this.preVerifiedServers = new Map();\n      this.verifiedServers = new Map();\n      this.isReady = false;\n      this.ready = new Promise((resolve) => {\n        this.readyCallback = () => resolve();\n      });\n      for (const url of this.seedServers) {\n        try {\n          await this.verifyServer(url, 0);\n        } catch (error) {\n          this.logger.error(`Unable to verify seed server ${url}`);\n          this.logger.errorStack(error);\n        }\n      }\n    } catch (error) {\n      this.logger.error('Error during Bolt client reset');\n      this.logger.errorStack(error);\n    }\n    this.isResetting = false;\n    if (!this.isReady) {\n      this.reset();\n    }\n  }\n\n  addStoredServersCallbacks(getStoredServersCallback:GetStoredServersCallback, saveStoredServersCallback: SaveStoredServersCallback, clearStoredServersCallback:ClearStoredServersCallback) {\n    this.getStoredServersCallbacks.push(getStoredServersCallback);\n    this.saveStoredServersCallbacks.push(saveStoredServersCallback);\n    this.clearStoredServersCallbacks.push(clearStoredServersCallback);\n    setTimeout(() => {\n      this.loadStoredServers();\n    }, 0);\n  }\n\n  async loadStoredServers() {\n    if (this.pauseVerification) {\n      return;\n    }\n    try {\n      const allStoredServers = [];\n      for (const getStoredServersCallback of this.getStoredServersCallbacks) {\n        const storedServers = await getStoredServersCallback();\n        for (const storedServer of shuffle(storedServers)) {\n          allStoredServers.push(storedServer);\n        }\n      }\n      allStoredServers.sort((x, y) => y[1] - x[1]);\n      if (allStoredServers.length > 0) {\n        this.logger.info('Stored Bolt server addresses:');\n      }\n      for (const [url, priority] of allStoredServers) {\n        this.storedServers.add(url);\n        this.logger.info(`\\t${url} (priority ${priority})`);\n      }\n      let addedNewServers = false;\n      for (const [url, priority] of allStoredServers) {\n        try {\n          const isNewServer = await this.verifyServer(url, priority);\n          if (isNewServer) {\n            addedNewServers = true;\n          }\n        } catch (error) {\n          this.logger.error(`Unable to verify ${url} (priority ${priority})`);\n          this.logger.errorStack(error);\n        }\n      }\n      if (addedNewServers && this.preVerifiedServers.size === 0 && !this.isReady) {\n        this.logger.error('Server not ready after loading stored servers');\n        this.reset();\n      }\n    } catch (error) {\n      this.logger.error('Unable to parse stored Bolt server addresses');\n      this.logger.errorStack(error);\n      for (const clearStoredServersCallback of this.clearStoredServersCallbacks) {\n        await clearStoredServersCallback();\n      }\n    }\n  }\n\n  async saveVerifiedServers() {\n    try {\n      const storedServers = [...this.verifiedServers].map((x) => [x[0], x[1] === 0 ? 0 : 1]);\n      for (const saveStoredServersCallback of this.saveStoredServersCallbacks) {\n        await saveStoredServersCallback(storedServers);\n      }\n    } catch (error) {\n      this.logger.error('Unable to save Bolt servers to local storage');\n      this.logger.errorStack(error);\n    }\n  }\n\n  addServer(s:string) {\n    const url = normalizeUrl(s);\n    if (this.seedServers.has(url)) {\n      return;\n    }\n    if (this.storedServers.has(url)) {\n      return;\n    }\n    this.seedServers.add(url);\n    if (this.pauseVerification) {\n      return;\n    }\n    this.verifyServer(url, 0).catch((error) => {\n      this.logger.error(`Unable to verify seed server ${url}`);\n      this.logger.errorStack(error);\n      if (this.preVerifiedServers.size === 0 && !this.isReady) {\n        this.reset();\n      }\n    });\n  }\n\n  async verifyServers() {\n    this.pauseVerification = false;\n    const promises = [];\n    for (const url of this.seedServers) {\n      promises.push(this.verifyServer(url, 0).catch((error) => {\n        this.logger.error(`Unable to re-verify seed server ${url}`);\n        this.logger.errorStack(error);\n      }));\n    }\n    promises.push(this.loadStoredServers());\n    await Promise.all(promises);\n    if (!this.isReady) {\n      throw new Error('Unable to verify servers');\n    }\n  }\n\n  async reverifyServers() {\n    this.isReady = false;\n    this.ready = new Promise((resolve) => {\n      this.readyCallback = () => resolve();\n    });\n    this.verifiedServers.clear();\n    await this.verifyServers();\n  }\n\n  setVerifiedServer(url:string, priority:number) {\n    this.emit('verifiedServer', url, priority);\n    this.verifiedServers.set(url, priority);\n    this.preVerifiedServers.delete(url);\n  }\n\n  setPreVerifiedServer(url:string, priority:number) {\n    this.emit('preVerifiedServer', url, priority);\n    this.preVerifiedServers.set(url, priority);\n  }\n\n  clearServer(url:string) {\n    this.emit('clearServer', url);\n    this.verifiedServers.delete(url);\n    this.preVerifiedServers.delete(url);\n  }\n\n  checkIsReady() {\n    if (this.verifiedServers.size > 0 && (!this.skipPriorityOneServers || Math.max(...[...this.verifiedServers].map((x) => x[1])) > 1)) {\n      this.resetCount = 0;\n      if (!this.isReady) {\n        this.isReady = true;\n        this.emit('ready');\n        if (typeof this.readyCallback === 'function') {\n          this.readyCallback();\n          delete this.readyCallback;\n        }\n      }\n    }\n  }\n\n  async verifyServer(url:string, priority:number) {\n    const maxExistingPriority = Math.max(...this.verifiedServers.values());\n    if (maxExistingPriority > priority) {\n      this.logger.info(`Not verifying ${url}, verified server with priority ${maxExistingPriority} already exists`);\n      return false;\n    }\n    const verifiedServerPriority = this.verifiedServers.get(url);\n    if (typeof verifiedServerPriority === 'number') {\n      if (verifiedServerPriority < priority) {\n        this.setVerifiedServer(url, priority);\n        this.throttledSaveVerifiedServers();\n      }\n      return false;\n    }\n    const preVerifiedServerPriority = this.preVerifiedServers.get(url);\n    if (typeof preVerifiedServerPriority === 'number') {\n      if (preVerifiedServerPriority < priority) {\n        this.setPreVerifiedServer(url, priority);\n      }\n      return false;\n    }\n    this.logger.info(`Verifying ${url}`);\n    this.setPreVerifiedServer(url, priority);\n    let clusterIdentifier;\n    let hostnames;\n    let ipRangeRoutes;\n    try {\n      const response = await fetch(`${url}/api/1.0/network-map/hostnames`);\n      const body = await response.json();\n      clusterIdentifier = body.publicKey || body.swarmKey;\n      hostnames = body.hostnames;\n      ipRangeRoutes = !!body.ipRangeRoutes;\n    } catch (error) {\n      this.clearServer(url);\n      throw new BoltVerificationError(`Unable to fetch hostnames from ${url}`);\n    }\n    if (typeof clusterIdentifier !== 'string') {\n      this.clearServer(url);\n      this.reset();\n      throw new BoltVerificationError(`Hostnames request to ${url} did not return cluster identifier`);\n    }\n    if (!Array.isArray(hostnames)) {\n      this.clearServer(url);\n      this.reset();\n      throw new BoltVerificationError(`Hostnames request to ${url} did not return hostnames array`);\n    }\n    if (typeof this.clusterIdentifier === 'string') {\n      if (this.clusterIdentifier !== clusterIdentifier) {\n        this.clearServer(url);\n        this.reset();\n        throw new Error(`Swarm key does not match for ${url}`);\n      }\n    } else {\n      this.clusterIdentifier = clusterIdentifier;\n    }\n    const storedPriority = this.preVerifiedServers.get(url) || priority;\n    this.setVerifiedServer(url, storedPriority);\n    if (ipRangeRoutes || hostnames && hostnames.length > 0) {\n      this.skipPriorityOneServers = true;\n    }\n    for (const hostname of hostnames) {\n      try {\n        await this.verifyServer(normalizeUrl(`https://${hostname}`), 2);\n      } catch (error) {\n        this.logger.error(`Unable to verify https://${hostname}`);\n        this.logger.errorStack(error);\n      }\n    }\n    this.checkIsReady();\n    this.throttledSaveVerifiedServers();\n    return true;\n  }\n\n  startIpfs() {\n    // Noop\n  }\n}\n\nconst bc = new BoltClient();\n\nif (hasWindow) {\n  window.boltClient = bc;\n}\n\nexport default bc;\n"],"file":"index.js"}