{"version":3,"sources":["../../src/index.js"],"names":["hasWindow","window","log","color","name","value","args","label","length","console","group","arg","err","error","dir","groupEnd","baseLogger","debug","info","warn","errorStack","any","promises","Promise","resolve","reject","didResolve","promise","then","catch","BoltUrlError","Error","constructor","message","BoltVerificationError","BoltVerificationFailedError","normalizeUrl","s","protocol","slashes","username","password","hostname","port","Url","result","charAt","push","join","chooseServer","serverMap","servers","maxPriority","Math","max","map","x","maxPriorityServers","filter","floor","random","BoltClient","EventEmitter","pauseVerification","seedServers","Set","verifiedServers","Map","verifications","isReady","ready","readyCallback","throttledSaveVerifiedServers","saveVerifiedServers","bind","isResetting","resetCount","logger","skipPriorityOneServers","getStoredServersCallbacks","saveStoredServersCallbacks","clearStoredServersCallbacks","getUrl","path","size","URL","toString","urls","Array","from","url","reset","setTimeout","clearStoredServersCallback","clusterIdentifier","reverifyServers","addStoredServersCallbacks","getStoredServersCallback","saveStoredServersCallback","promiseOrStoredServers","isArray","verifyStoredServers","storedServers","priority","verifyServer","loadStoredServers","addServer","emit","has","add","verifyServers","lastVerification","cancelVerifications","clear","setVerifiedServer","Date","now","set","clearServer","delete","checkIsReady","cancelVerification","verification","get","abort","keys","maxExistingPriority","values","verifiedServerPriority","activeVerification","activePriority","abortController","AbortController","timeout","_verifyServer","signal","clearTimeout","aborted","finally","abortSignal","hostnames","ipRangeRoutes","response","fetch","ok","statusText","body","json","publicKey","swarmKey","includes","newUrl","all","startIpfs","bc","boltClient"],"mappings":"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","sourcesContent":["// @flow\n\nimport Url from 'url-parse';\nimport EventEmitter from 'events';\nimport debounce from 'lodash/debounce';\n\nconst hasWindow = typeof window !== 'undefined';\n\ntype GetStoredServersCallback = () => Promise<Array<[string, number]>> | Array<[string, number]>;\ntype SaveStoredServersCallback = (Array<[string, number]>) => Promise<void> | void;\ntype ClearStoredServersCallback = () => Promise<void> | void;\n\nconst log = (color:string, name:string, value:string | number, ...args:Array<any>) => {\n  const label = `%c${name}: %c${value}`;\n  if (args.length === 0) {\n    console.log(label, 'color:#333; font-weight: bold', `color:${color}`); // eslint-disable-line no-console\n    return;\n  }\n  console.group(label, 'color:#333; font-weight: bold', `color:${color}`); // eslint-disable-line no-console\n  for (const arg of args) {\n    if (typeof arg === 'undefined') {\n      continue;\n    } else if (typeof arg === 'string') {\n      console.log(`%c${arg}`, 'color:#666'); // eslint-disable-line no-console\n    } else {\n      if (arg && arg.err) {\n        console.error(arg.err); // eslint-disable-line no-console\n      } else if (arg && arg.error) {\n        console.error(arg.error); // eslint-disable-line no-console\n      }\n      console.dir(arg); // eslint-disable-line no-console\n    }\n  }\n  console.groupEnd(); // eslint-disable-line no-console\n};\n\nconst baseLogger = {\n  debug: (value:string | number, ...args:Array<any>) => {\n    log('blue', hasWindow ? 'Bolt Client (Window)' : 'Bolt Client (Out of window)', value, ...args);\n  },\n  info: (value:string | number, ...args:Array<any>) => {\n    log('green', hasWindow ? 'Bolt Client (Window)' : 'Bolt Client (Out of window)', value, ...args);\n  },\n  warn: (value:string | number, ...args:Array<any>) => {\n    log('orange', hasWindow ? 'Bolt Client (Window)' : 'Bolt Client (Out of window)', value, ...args);\n  },\n  error: (value:string | number, ...args:Array<any>) => {\n    log('red', hasWindow ? 'Bolt Client (Window)' : 'Bolt Client (Out of window)', value, ...args);\n  },\n  errorStack: (error:Error | MediaError) => {\n    console.error(error); // eslint-disable-line no-console\n  },\n};\n\nconst any = (promises:Array<Promise<any>>) => new Promise(((resolve, reject) => {\n  let didResolve = false;\n  for (const promise of promises) {\n    promise.then(() => { // eslint-disable-line no-loop-func\n      if (didResolve) {\n        return;\n      }\n      didResolve = true;\n      resolve();\n    }).catch((error) => { // eslint-disable-line no-loop-func\n      if (didResolve) {\n        return;\n      }\n      didResolve = true;\n      reject(error);\n    });\n  }\n}));\n\nexport class BoltUrlError extends Error {\n  constructor(message:string) {\n    super(message);\n    this.name = 'BoltUrlError';\n  }\n}\n\nexport class BoltVerificationError extends Error {\n  constructor(message:string) {\n    super(message);\n    this.name = 'BoltVerificationError';\n  }\n}\n\nexport class BoltVerificationFailedError extends Error {\n  constructor(message:string) {\n    super(message);\n    this.name = 'BoltVerificationFailedError';\n  }\n}\n\nconst normalizeUrl = (s:string) => {\n  const { protocol, slashes, username, password, hostname, port } = new Url(s);\n  const result = [protocol || 'https:'];\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') {\n    result.push(':');\n  }\n  if (slashes) {\n    result.push('//');\n  }\n  if (username) {\n    result.push(username);\n    if (password) {\n      result.push(`:${password}`);\n    }\n    result.push('@');\n  }\n  result.push(hostname);\n  result.push(port || (protocol === 'https:' ? ':443' : ':80'));\n  return result.join('');\n};\n\nconst chooseServer = (serverMap:Map<string, number>) => {\n  const servers = [...serverMap];\n  const maxPriority = Math.max(...servers.map((x) => x[1]));\n  const maxPriorityServers = servers.filter((x) => x[1] === maxPriority).map((x) => x[0]);\n  return maxPriorityServers[Math.floor(Math.random() * maxPriorityServers.length)];\n};\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void\n};\n\n/**\n * Class representing a Bolt Client\n */\nexport class BoltClient extends EventEmitter {\n  declare ready: Promise<void>;\n  declare readyCallback: void | () => void;\n  declare seedServers: Set<string>;\n  declare verifiedServers: Map<string, number>;\n  declare verifications: Map<string, [number, AbortController, Promise<void>]>;\n  declare throttledSaveVerifiedServers: () => void;\n  declare isResetting: boolean;\n  declare resetCount: number;\n  declare isReady: boolean;\n  declare logger: Logger;\n  declare clusterIdentifier: string | void;\n  declare skipPriorityOneServers: boolean;\n  declare getStoredServersCallbacks: Array<GetStoredServersCallback>;\n  declare saveStoredServersCallbacks: Array<SaveStoredServersCallback>;\n  declare clearStoredServersCallbacks: Array<ClearStoredServersCallback>;\n  declare pauseVerification: boolean;\n  declare lastVerification: void | number;\n\n  constructor() {\n    super();\n    this.pauseVerification = false;\n    this.seedServers = new Set();\n    this.verifiedServers = new Map();\n    this.verifications = new Map();\n    this.isReady = false;\n    this.ready = new Promise((resolve) => {\n      this.readyCallback = () => resolve();\n    });\n    this.throttledSaveVerifiedServers = debounce(this.saveVerifiedServers.bind(this), 1000);\n    this.isResetting = false;\n    this.resetCount = 0;\n    this.logger = baseLogger;\n    this.skipPriorityOneServers = false;\n    this.getStoredServersCallbacks = [];\n    this.saveStoredServersCallbacks = [];\n    this.clearStoredServersCallbacks = [];\n    this.ready.then(() => {\n      if (this.getStoredServersCallbacks.length === 0) {\n        this.logger.error('Missing stored server callbacks');\n      }\n    });\n  }\n\n  getUrl(path:string) {\n    if (this.verifiedServers.size > 0) {\n      if (!this.skipPriorityOneServers || Math.max(...[...this.verifiedServers].map((x) => x[1])) > 1) {\n        return new URL(path, chooseServer(this.verifiedServers)).toString();\n      }\n    }\n    if (!this.skipPriorityOneServers) {\n      if (this.seedServers.size > 0) {\n        const urls = Array.from(this.seedServers);\n        const url = urls[Math.floor(Math.random() * urls.length)];\n        return new URL(path, url).toString();\n      }\n    }\n    throw new BoltUrlError('No server URLs available');\n  }\n\n  async reset() {\n    if (this.isResetting === true) {\n      return;\n    }\n    this.resetCount += 1;\n    if (this.resetCount < 6) {\n      this.logger.warn(`Reset attempt ${this.resetCount}, waiting ${this.resetCount * this.resetCount} seconds`);\n      // $FlowFixMe\n      await any([\n        new Promise((resolve) => setTimeout(resolve, this.resetCount * this.resetCount * 1000)),\n        this.ready,\n      ]);\n    } else {\n      this.logger.warn(`Reset attempt ${this.resetCount}, waiting 30 seconds`);\n      // $FlowFixMe\n      await any([\n        new Promise((resolve) => setTimeout(resolve, 30000)),\n        this.ready,\n      ]);\n    }\n    try {\n      this.isResetting = true;\n      for (const clearStoredServersCallback of this.clearStoredServersCallbacks) {\n        await clearStoredServersCallback();\n      }\n      delete this.clusterIdentifier;\n      await this.reverifyServers();\n    } catch (error) {\n      this.logger.error('Error during Bolt client reset');\n      this.logger.errorStack(error);\n    }\n    this.isResetting = false;\n    if (!this.isReady) {\n      this.reset();\n    }\n  }\n\n  addStoredServersCallbacks(getStoredServersCallback:GetStoredServersCallback, saveStoredServersCallback: SaveStoredServersCallback, clearStoredServersCallback:ClearStoredServersCallback) {\n    this.getStoredServersCallbacks.push(getStoredServersCallback);\n    this.saveStoredServersCallbacks.push(saveStoredServersCallback);\n    this.clearStoredServersCallbacks.push(clearStoredServersCallback);\n    if (this.pauseVerification) {\n      return;\n    }\n    const promiseOrStoredServers = getStoredServersCallback();\n    if (Array.isArray(promiseOrStoredServers)) {\n      this.verifyStoredServers(promiseOrStoredServers);\n    } else if (promiseOrStoredServers instanceof Promise) {\n      promiseOrStoredServers.then((storedServers) => {\n        this.verifyStoredServers(storedServers);\n      }).catch((error) => {\n        this.logger.error('Unable to load stored servers');\n        this.logger.errorStack(error);\n      });\n    }\n  }\n\n  verifyStoredServers(storedServers:Array<[string, number]>) {\n    if (storedServers.length === 0) {\n      return;\n    }\n    this.logger.info('Stored Bolt server addresses:');\n    for (const [url, priority] of storedServers) {\n      this.logger.info(`\\t${url} (priority ${priority})`);\n      this.verifyServer(url, priority).catch((error) => {\n        this.logger.error(`Unable to verify stored server ${url} (priority ${priority})`);\n        this.logger.errorStack(error);\n      });\n    }\n  }\n\n  async loadStoredServers() {\n    if (this.pauseVerification) {\n      return;\n    }\n    try {\n      for (const getStoredServersCallback of this.getStoredServersCallbacks) {\n        const storedServers = await getStoredServersCallback();\n        this.verifyStoredServers(storedServers);\n      }\n    } catch (error) {\n      this.logger.error('Unable to parse stored Bolt server addresses');\n      this.logger.errorStack(error);\n      for (const clearStoredServersCallback of this.clearStoredServersCallbacks) {\n        await clearStoredServersCallback();\n      }\n    }\n  }\n\n  async saveVerifiedServers() {\n    try {\n      const storedServers = [...this.verifiedServers].map((x) => [x[0], x[1] === 0 ? 0 : 1]);\n      for (const saveStoredServersCallback of this.saveStoredServersCallbacks) {\n        await saveStoredServersCallback(storedServers);\n      }\n    } catch (error) {\n      this.logger.error('Unable to save Bolt servers to local storage');\n      this.logger.errorStack(error);\n    }\n  }\n\n  addServer(s:string) {\n    const url = normalizeUrl(s);\n    this.emit('addServer', url);\n    if (this.seedServers.has(url)) {\n      return;\n    }\n    this.seedServers.add(url);\n    if (this.pauseVerification) {\n      return;\n    }\n    this.verifyServer(url, 0).catch((error) => {\n      this.logger.error(`Unable to verify seed server ${url}`);\n      this.logger.errorStack(error);\n    });\n  }\n\n  async verifyServers() {\n    this.pauseVerification = false;\n    for (const url of this.seedServers) {\n      this.verifyServer(url, 0).catch((error) => {\n        this.logger.error(`Unable to verify seed server ${url}`);\n        this.logger.errorStack(error);\n      });\n    }\n    await this.loadStoredServers();\n    if (this.verifiedServers.size === 0 && this.verifications.size === 0) {\n      throw new BoltVerificationFailedError('Unable to verify servers, no server URLs available');\n    }\n    await this.ready;\n  }\n\n  async reverifyServers() {\n    this.logger.warn('Re-verifying servers');\n    this.isReady = false;\n    this.ready = new Promise((resolve) => {\n      this.readyCallback = () => resolve();\n    });\n    delete this.lastVerification;\n    this.cancelVerifications();\n    this.verifiedServers.clear();\n    await this.verifyServers();\n  }\n\n  setVerifiedServer(url:string, priority:number) {\n    this.lastVerification = Date.now();\n    this.verifiedServers.set(url, priority);\n    this.emit('verifiedServer', url, priority);\n  }\n\n  clearServer(url:string) {\n    this.verifiedServers.delete(url);\n    if (this.verifiedServers.size === 0) {\n      delete this.lastVerification;\n    }\n    this.emit('clearServer', url);\n  }\n\n  checkIsReady() {\n    if (this.verifiedServers.size > 0 && (!this.skipPriorityOneServers || Math.max(...[...this.verifiedServers].map((x) => x[1])) > 1)) {\n      this.resetCount = 0;\n      if (!this.isReady) {\n        this.isReady = true;\n        this.emit('ready');\n        if (typeof this.readyCallback === 'function') {\n          this.readyCallback();\n          delete this.readyCallback;\n        }\n      }\n    }\n  }\n\n  cancelVerification(url:string) {\n    const verification = this.verifications.get(url);\n    if (typeof verification === 'undefined') {\n      return;\n    }\n    this.verifications.delete(url);\n    verification[1].abort();\n  }\n\n  cancelVerifications() {\n    for (const url of this.verifications.keys()) {\n      this.cancelVerification(url);\n    }\n  }\n\n  async verifyServer(url:string, priority:number) {\n    // const key = `${url}:${priority}`;\n    const maxExistingPriority = Math.max(...this.verifiedServers.values());\n    if (maxExistingPriority > priority) {\n      this.logger.info(`Not verifying ${url}, verified server with priority ${maxExistingPriority} already exists`);\n      return;\n    }\n    const verifiedServerPriority = this.verifiedServers.get(url);\n    if (typeof verifiedServerPriority === 'number') {\n      if (verifiedServerPriority < priority) {\n        this.setVerifiedServer(url, priority);\n        this.throttledSaveVerifiedServers();\n      }\n      return;\n    }\n    const activeVerification = this.verifications.get(url);\n    if (Array.isArray(activeVerification)) {\n      const [activePriority] = activeVerification;\n      if (activePriority < priority) {\n        activeVerification[0] = priority;\n      }\n      this.logger.info(`Not verifying ${url}, verification in progress`);\n      await activeVerification[2];\n      return;\n    }\n    const abortController = new AbortController();\n    const timeout = setTimeout(() => {\n      abortController.abort();\n    }, 15000);\n    const verification = [priority, abortController, this._verifyServer(url, abortController.signal).then(() => { // eslint-disable-line no-underscore-dangle\n      clearTimeout(timeout);\n      if (abortController.signal.aborted) {\n        this.logger.warn(`Unable to verify ${url}, verification aborted`);\n        return;\n      }\n      // Use reference to verification object in case the priority is later changed\n      this.setVerifiedServer(url, verification[0]);\n      this.checkIsReady();\n      this.throttledSaveVerifiedServers();\n    }).catch((error) => {\n      if (abortController.signal.aborted) {\n        this.logger.warn(`Unable to verify ${url}, verification aborted`);\n        return;\n      }\n      throw error;\n    }).finally(() => {\n      this.verifications.delete(url);\n    })];\n    this.verifications.set(url, verification);\n    await verification[2];\n  }\n\n  async _verifyServer(url:string, abortSignal:AbortSignal) { // eslint-disable-line no-underscore-dangle\n    this.logger.info(`Verifying ${url}`);\n    let clusterIdentifier;\n    let hostnames;\n    let ipRangeRoutes;\n    try {\n      const response = await fetch(`${url}/api/1.0/network-map/hostnames`, {\n        signal: abortSignal,\n      });\n      if (!response.ok) {\n        const error = new Error(response.statusText);\n        throw error;\n      }\n      const body = await response.json();\n      clusterIdentifier = body.publicKey || body.swarmKey;\n      hostnames = body.hostnames;\n      ipRangeRoutes = !!body.ipRangeRoutes;\n    } catch (error) {\n      this.clearServer(url);\n      this.logger.errorStack(error);\n      throw new BoltVerificationError(`Unable to fetch hostnames from ${url}`);\n    }\n    if (typeof clusterIdentifier !== 'string') {\n      this.clearServer(url);\n      this.reset();\n      throw new BoltVerificationError(`Hostnames request to ${url} did not return cluster identifier`);\n    }\n    if (!Array.isArray(hostnames)) {\n      this.clearServer(url);\n      this.reset();\n      throw new BoltVerificationError(`Hostnames request to ${url} did not return hostnames array`);\n    }\n    if (typeof this.clusterIdentifier === 'string') {\n      if (this.clusterIdentifier !== clusterIdentifier) {\n        this.clearServer(url);\n        this.reset();\n        throw new BoltVerificationError(`Swarm key does not match for ${url}`);\n      }\n    } else {\n      this.clusterIdentifier = clusterIdentifier;\n    }\n    if (ipRangeRoutes || hostnames && hostnames.length > 0) {\n      this.skipPriorityOneServers = true;\n    }\n    if (abortSignal.aborted) {\n      return;\n    }\n    const promises = [];\n    for (const hostname of hostnames) {\n      if (url.includes(hostname)) {\n        const verification = this.verifications.get(url);\n        if (typeof verification === 'undefined') {\n          throw new Error('Unable to adjust priority, verification does not exist');\n        }\n        verification[0] = 2;\n      } else {\n        const newUrl = normalizeUrl(`https://${hostname}`);\n        promises.push(this.verifyServer(newUrl, 2).catch((error) => {\n          this.logger.error(`Unable to verify ${newUrl} from hostnames in ${url}`);\n          this.logger.errorStack(error);\n        }));\n      }\n    }\n    await Promise.all(promises);\n  }\n\n  startIpfs() {\n    // Noop\n  }\n}\n\nconst bc = new BoltClient();\n\nif (hasWindow) {\n  window.boltClient = bc;\n}\n\nexport default bc;\n"],"file":"index.js"}