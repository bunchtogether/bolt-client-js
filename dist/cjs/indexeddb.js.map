{"version":3,"sources":["../../src/indexeddb.js"],"names":["databasePromise","Promise","resolve","reject","request","self","indexedDB","open","onupgradeneeded","e","target","result","createObjectStore","keyPath","error","name","onerror","event","boltClient","logger","console","Error","onsuccess","info","getReadWriteObjectStore","db","transaction","objectStore","onabort","getStoredServersCallback","getAll","map","url","priority","saveStoredServersCallback","servers","i","length","put","clearStoredServersCallback","clear","addStoredServersCallbacks"],"mappings":"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","sourcesContent":["// @flow\n\nimport boltClient from './index';\n\nconst databasePromise = new Promise((resolve, reject) => {\n  const request = self.indexedDB.open('bolt', 1);\n\n  request.onupgradeneeded = function (e) {\n    try {\n      e.target.result.createObjectStore('bolt', { keyPath: 'url' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n  };\n\n  request.onerror = (event) => {\n    boltClient.logger.error('Unable to open stored server database');\n    console.error(event); // eslint-disable-line no-console\n    reject(new Error('Unable to open stored server database'));\n  };\n\n  request.onsuccess = function (event) {\n    boltClient.logger.info('Opened stored server database');\n    resolve(event.target.result);\n  };\n});\n\n\nasync function getReadWriteObjectStore() {\n  const db = await databasePromise;\n  const transaction = db.transaction(['bolt'], 'readwrite');\n  const objectStore = transaction.objectStore('bolt');\n  transaction.onabort = (event) => {\n    boltClient.logger.error('Read-write stored server transaction was aborted');\n    console.error(event); // eslint-disable-line no-console\n  };\n  transaction.onerror = (event) => {\n    boltClient.logger.error('Error in read-write stored server transaction');\n    console.error(event); // eslint-disable-line no-console\n  };\n  return objectStore;\n}\n\nasync function getStoredServersCallback():Promise<Array<[string, number]>> {\n  const objectStore = await getReadWriteObjectStore();\n  const request = objectStore.getAll();\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result.map(({ url, priority }) => [url, priority]));\n    };\n    request.onerror = function (event) {\n      boltClient.logger.error('Unable to get stored servers from indexedDB');\n      console.error(event); // eslint-disable-line no-console\n      reject(new Error('Unable to get stored servers from indexedDB'));\n    };\n  });\n}\n\nasync function saveStoredServersCallback(servers: Array<[string, number]>) {\n  const objectStore = await getReadWriteObjectStore();\n  for (let i = 0; i < servers.length; i += 1) {\n    if (i < servers.length - 1) {\n      objectStore.put({ url: servers[i][0], priority: servers[i][1] });\n      continue;\n    }\n    const request = objectStore.put({ url: servers[i][0], priority: servers[i][1] });\n    await new Promise((resolve, reject) => {\n      request.onsuccess = function () {\n        resolve();\n      };\n      request.onerror = function (event) {\n        boltClient.logger.error('Unable to add stored servers to indexedDB');\n        console.error(event); // eslint-disable-line no-console\n        reject(new Error('Unable to add stored servers to indexedDB'));\n      };\n    });\n  }\n}\n\nasync function clearStoredServersCallback() {\n  const objectStore = await getReadWriteObjectStore();\n  const request = objectStore.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      boltClient.logger.error('Unable to clear stored servers from indexedDB');\n      console.error(event); // eslint-disable-line no-console\n      reject(new Error('Unable to clear stored servers to indexedDB'));\n    };\n  });\n}\n\nboltClient.addStoredServersCallbacks(getStoredServersCallback, saveStoredServersCallback, clearStoredServersCallback);\n"],"file":"indexeddb.js"}